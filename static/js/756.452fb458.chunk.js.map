{"version":3,"file":"static/js/756.452fb458.chunk.js","mappings":"wTAEaA,EAAOC,EAAAA,EAAAA,IAAH,wNAaJC,EAAeD,EAAAA,EAAAA,IAAH,uJAQZE,EAAWF,EAAAA,EAAAA,IAAH,0G,SCIrB,EAtBiB,SAAC,GAAmC,IAAjCG,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SACnC,OACE,UAACN,EAAD,YACE,SAACE,EAAD,UACGI,GACC,gBACEC,IAAG,0CAAqCD,GACxCE,IAAG,gBAAWJ,MAGhB,gBAAKG,IAAKE,EAAUD,IAAI,sBAAsBE,MAAO,SAGzD,UAACP,EAAD,YACE,0BACE,SAAC,MAAD,IAAY,IAAEC,MAEhB,4CAAkBC,UAIzB,ECxBYM,EAAmBV,EAAAA,EAAAA,IAAH,4FAMhBW,EAAgBX,EAAAA,EAAAA,IAAH,sGCiD1B,EAjDa,WACX,OAA8BY,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,YAAhC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAkCJ,EAAAA,EAAAA,YAAlC,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACR,IACEH,GAAa,IACb,iBAAC,qGACoBI,EAAAA,EAAAA,IAAgBH,GADpC,OACOI,EADP,OAECT,EAAWS,GACXL,GAAa,GAHd,0CAAD,EAQD,CAHC,MAAOM,GACPN,GAAa,GACbF,EAAYQ,EAAMC,QACnB,CACF,GAAE,CAACN,KAGF,gCACGF,IACC,SAACP,EAAD,WACE,SAAC,KAAD,CACEgB,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,eAK1DX,IAAaE,IAAa,yBAAMF,KAE/BE,IACA,SAACN,EAAD,UACGE,EAAQc,KAAI,gBAAGxB,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAyBC,EAAlC,EAAoBuB,aAAwBC,EAA5C,EAA4CA,GAA5C,OACX,SAAC,EAAD,CAEE1B,KAAMA,EACNC,UAAWA,EACXC,SAAUA,EACVwB,GAAIA,GAJCA,EAFI,QAatB,C,yLCrDKC,E,QAAeC,EAAAA,OAAa,CAChCC,QAAS,gCACTC,QAAS,CACPC,cACE,6NACFC,OAAQ,sBAICC,EAAW,mCAAG,oGACFN,EAAaO,IAAI,qBADf,cACnBC,EADmB,yBAElBA,EAASf,KAAKgB,SAFI,2CAAH,qDAKXC,EAAY,mCAAG,WAAMC,GAAN,uFACHX,EAAaO,IAAb,6BAAuCI,IADpC,cACpBH,EADoB,yBAEnBA,EAASf,KAAKgB,SAFK,2CAAH,sDAKZG,EAAe,mCAAG,WAAMvB,GAAN,uFACNW,EAAaO,IAAb,gBAA0BlB,EAA1B,MADM,cACvBmB,EADuB,yBAEtBA,EAASf,MAFa,2CAAH,sDAKfD,EAAe,mCAAG,WAAMH,GAAN,uFACNW,EAAaO,IAAb,gBAA0BlB,EAA1B,cADM,cACvBmB,EADuB,yBAEtBA,EAASf,KAAKoB,MAFQ,2CAAH,sDAKfC,EAAe,mCAAG,WAAMzB,GAAN,uFACJW,EAAaO,IAAb,gBAA0BlB,EAA1B,cADI,cACrBmB,EADqB,yBAEtBA,EAASf,KAAKgB,SAFQ,2CAAH,qD","sources":["components/CastCard/CastCard.styled.js","components/CastCard/CastCard.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/movie-service.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  box-shadow: 0px 2px 2px 2px #b0b0b0;\n  width: 205px;\n  height: 360px;\n\n  & img {\n    width: 205px;\n  }\n`;\n\nexport const ImgContainer = styled.div`\n  height: 308px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  box-shadow: 0 4px 2px -2px gray;\n`;\n\nexport const CardInfo = styled.div`\n  padding: 5px 10px;\n  overflow: auto;\n\n  & b {\n    margin-bottom: 5px;\n  }\n`;\n","import emptyImg from 'images/emptyImg.png';\nimport { GoPerson } from 'react-icons/go';\nimport { Card, CardInfo, ImgContainer } from './CastCard.styled';\nimport PropTypes from 'prop-types';\n\nconst CastCard = ({ name, character, actorImg }) => {\n  return (\n    <Card>\n      <ImgContainer>\n        {actorImg ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w200/${actorImg}`}\n            alt={`actor ${name}`}\n          />\n        ) : (\n          <img src={emptyImg} alt=\"There are no images\" width={100} />\n        )}\n      </ImgContainer>\n      <CardInfo>\n        <b>\n          <GoPerson /> {name}\n        </b>\n        <p>{`Character: ${character}`}</p>\n      </CardInfo>\n    </Card>\n  );\n};\nexport default CastCard;\n\nCastCard.propTypes = {\n  name: PropTypes.string,\n  character: PropTypes.string,\n  actorImg: PropTypes.string,\n};\n","import styled from '@emotion/styled';\n\nexport const SpinnerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 200px;\n`;\n\nexport const CastContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  padding-top: 15px;\n  \n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ColorRing } from 'react-loader-spinner';\n\nimport { getMovieCredits } from 'services/movie-service';\nimport CastCard from 'components/CastCard/CastCard';\nimport { SpinnerContainer, CastContainer } from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [rejected, setRejected] = useState();\n  const [isLoading, setIsLoading] = useState();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      setIsLoading(true);\n      (async () => {\n        const data = await getMovieCredits(movieId);\n        setCredits(data);\n        setIsLoading(false);\n      })();\n    } catch (error) {\n      setIsLoading(false);\n      setRejected(error.message);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <SpinnerContainer>\n          <ColorRing\n            colors={['#b8c480', '#B2A3B5', '#F4442E', '#51E5FF', '#429EA6']}\n          />\n        </SpinnerContainer>\n      )}\n\n      {rejected && !isLoading && <div>{rejected}</div>}\n\n      {!isLoading && (\n        <CastContainer>\n          {credits.map(({ name, character, profile_path: actorImg, id }) => (\n            <CastCard\n              key={id}\n              name={name}\n              character={character}\n              actorImg={actorImg}\n              id={id}\n            />\n          ))}\n        </CastContainer>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst movieService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  headers: {\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNmM3MDM0ZjQzZmMxMWRhZjUzOTY2NmIxNGU1YmVhMCIsInN1YiI6IjY0OTk4NTA1YjM0NDA5MDBlMjcyZTgxNSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.0M9W_VhYxYdCcevqQPPA792PMZPlCZIhzDoN3aG3W-M',\n    accept: 'application/json',\n  },\n});\n\nexport const getTrending = async () => {\n  const response = await movieService.get('trending/all/day?');\n  return response.data.results;\n};\n\nexport const searchMovies = async query => {\n  const response = await movieService.get(`search/movie?query=${query}`);\n  return response.data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await movieService.get(`movie/${movieId}?`);\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await movieService.get(`movie/${movieId}/credits?`);\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n    const response = await movieService.get(`movie/${movieId}/reviews?`);\n  return response.data.results;\n};\n"],"names":["Card","styled","ImgContainer","CardInfo","name","character","actorImg","src","alt","emptyImg","width","SpinnerContainer","CastContainer","useState","credits","setCredits","rejected","setRejected","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieCredits","data","error","message","colors","map","profile_path","id","movieService","axios","baseURL","headers","Authorization","accept","getTrending","get","response","results","searchMovies","query","getMovieDetails","cast","getMovieReviews"],"sourceRoot":""}